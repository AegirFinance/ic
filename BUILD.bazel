load("//bazel:defs.bzl", "cargo_build", "gzip_compress")
load("//bazel:canisters.bzl", "optimized_canister")
load("//bazel:transitions.bzl", "opt_stripped_binary")
load("@buildifier_prebuilt//:rules.bzl", "buildifier")
load("//bazel:buildifier.bzl", "buildifier_test")

package(default_visibility = ["//visibility:public"])

exports_files([
    ".rclone.conf",
    "clippy.toml",
    "rustfmt.toml",
])

BUILDIFIER_EXCLUDES = [
    "./.git/*",
    "./gitlab-ci/src/git_changes/test_data/**",
]

buildifier(
    name = "buildifier",
    exclude_patterns = BUILDIFIER_EXCLUDES,
    lint_mode = "fix",
    mode = "fix",
)

# buildifier.check rule is used by buildifier_test
buildifier(
    name = "buildifier.check",
    exclude_patterns = BUILDIFIER_EXCLUDES,
    lint_mode = "warn",
    mode = "diff",
)

buildifier_test(
    name = "buildifier_test",
    tags = [
        "external",
        "local",
        "no-sandbox",
        "small",
        "smoke",
    ],
)

alias(
    name = "bazelifier",
    actual = "//rs/bazelifier",
)

opt_stripped_binary(
    name = "replica",
    binary = "//rs/replica",
)

opt_stripped_binary(
    name = "ic-btc-adapter",
    binary = "//rs/bitcoin/adapter:ic-btc-adapter",
)

opt_stripped_binary(
    name = "ic-consensus-pool-util",
    binary = "//rs/artifact_pool:ic-consensus-pool-util",
)

opt_stripped_binary(
    name = "sandbox_launcher",
    binary = "//rs/canister_sandbox/sandbox_launcher",
)

opt_stripped_binary(
    name = "canister_sandbox",
    binary = "//rs/canister_sandbox",
)

opt_stripped_binary(
    name = "ic-canister-http-adapter",
    binary = "//rs/canister_http/adapter:ic-canister-http-adapter",
)

opt_stripped_binary(
    name = "orchestrator",
    binary = "//rs/orchestrator",
)

opt_stripped_binary(
    name = "vsock_agent",
    binary = "//rs/guestos_vsock_agent",
)

opt_stripped_binary(
    name = "ic-regedit",
    binary = "//rs/registry/regedit:ic-regedit",
)

opt_stripped_binary(
    name = "ic-crypto-csp",
    binary = "//rs/crypto:ic-crypto-csp",
)

opt_stripped_binary(
    name = "state-tool",
    binary = "//rs/state_tool",
)

opt_stripped_binary(
    name = "ic-recovery",
    binary = "//rs/recovery:ic-recovery",
)

cargo_build(
    name = "ledger_archive_wasm",
    srcs = ["//rs:all_sources"],
    binaries = [
        "ledger-archive-node-canister",
    ],
    cargo_flags = [
        "--manifest-path",
        "rs/Cargo.toml",
    ],
    profile = "canister-release",
    target = "wasm32-unknown-unknown",
)

optimized_canister(
    name = "ledger_archive_canister",
    wasm = ":ledger_archive_wasm",
)

CANISTERS = [
    "cycles-minting-canister",
    "genesis-token-canister",
    "governance-canister",
    "ledger-canister",
    "nns-ui-canister",
    "registry-canister",
    "root-canister",
    "sns-governance-canister",
    "sns-root-canister",
    "sns-swap-canister",
    "xnet-test-canister",
]

cargo_build(
    name = "all_canisters",
    srcs = ["//rs:all_sources"],
    binaries = CANISTERS,
    cargo_flags = [
        "--manifest-path",
        "rs/Cargo.toml",
    ],
    env_paths = {
        "LEDGER_ARCHIVE_NODE_CANISTER_WASM_PATH": "$(execpath :ledger_archive_canister)",
    },
    profile = "canister-release",
    target = "wasm32-unknown-unknown",
    deps = [
        ":ledger_archive_canister",
    ],
)

[optimized_canister(
    name = canister + "-opt",
    wasm = ":" + canister + ".wasm",
) for canister in CANISTERS]

[gzip_compress(
    name = canister + ".wasm.gz",
    srcs = [":" + canister + "-opt.wasm"],
) for canister in CANISTERS]
